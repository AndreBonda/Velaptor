name: ðŸš€Release

env:
  PROJECT_NAME: Velaptor
  NET_SDK_VERSION: 5.0.x # Changing this means changing ARTIFACT_FOLDER_NAME
  ARTIFACT_FOLDER_NAME: '5.0' # Changing this means changing NET_SDK_VERSION
  
on:
  workflow_dispatch:
  push:
    branches: [
      develop, # QA Releases
      release/v*.*.*, # Preview Releases
      master # Production Releases
    ]
    paths-ignore:
      - ".github/**"
      - 'Documentation/**'
      - '.editorconfig'
      - '*.runsettings'
      - '.gitattributes'
      - '.gitignore'
      - '*.md'
      - '.vscode/**'

jobs:
  Validate_Version:
    name: Validate Version
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Get Version From Project File
      id: proj-file-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate Version Type
      run: |
        $projFileVersion = "${{ steps.proj-file-version.outputs.version }}";

        # If the branch is develop or master
        if ("${{ github.ref }}".EndsWith("develop") -or "${{ github.ref}}".EndsWith("master")) 
        {
            # If the version is a preview type, fail
            if ($projFileVersion.Contains("-preview."))
            {
                $firstSection = $projFileVersion.Split("-")[0];

                echo "The version must not be a preview version type for the develop or master branches.";
                echo "Did you mean '$firstSection'?";

                exit 1 # Fail
            }
        }
        else # If the branch is release or manually ran under a different branch
        {
            # If the project version does not contain preview, fail
            if ($projFileVersion.Contains("-preview.") -eq $false)
            {
                echo "version incorrect!!"
                exit 1 # Fail
            }
        }

    - name: Validate Version
      uses: KinsonDigital/VersionValidator@v1.0.0-preview.2
      with:
        nuget-package-name: "KinsonDigital.Velaptor"
        version: "${{ steps.proj-file-version.outputs.version }}"
        check-nuget: "true"
        fail-if-nuget-version-exists: "true"

  Determine_Build_Config:
    name: Determine Build Config
    runs-on: windows-latest
    steps:
    - name: Determine Build Config
      id: determine_build_config
      run: |
        # If the branch ends with master, the build config is release
        if ("${{ github.ref }}".EndsWith("master")) {
          echo "::set-output name=build-config::Release"
        } else { # Build config for any other branch is debug
          echo "::set-output name=build-config::Debug"
        }
    outputs:
      build-config: ${{ steps.determine_build_config.outputs.build-config }}

  Build_Project_File_Path:
    name: Build Project Path
    runs-on: windows-latest
    steps:
    - name: Build Project Path
      id: build_project_file_path
      run: echo "::set-output name=file-path::${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"
    outputs:
      project-file-path: ${{ steps.build_project_file_path.outputs.file-path}}
  
  Build_And_Test_Library:
    # Only publish library if it is a release (preview) or master (production) branch
    if: contains(github.ref, 'release/v') || endsWith(github.ref, 'master')
    name: Build & Test (Library)
    runs-on: windows-latest
    needs: [ Validate_Version, Determine_Build_Config, Build_Project_File_Path ]
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NET_SDK_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore "${{ needs.Build_Project_File_Path.outputs.project-file-path }}"

    - name: Build
      run: dotnet build "${{ needs.Build_Project_File_Path.outputs.project-file-path }}" `
        -c ${{ needs.Determine_Build_Config.outputs.build-config }} `
        --no-restore

    - name: Execute Unit Tests
      run: dotnet test "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/${{ env.PROJECT_NAME }}Tests.csproj" `
        -c ${{ needs.Determine_Build_Config.outputs.build-config }} `
        --collect:"XPlat Code Coverage" `
        --no-restore

    - name: Publish Code Coverage Results
      uses: codecov/codecov-action@v1.5.2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/TestResults/**/coverage.cobertura.xml

    - name: Publish Build Artifacts
      uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ env.PROJECT_NAME }} Build Artifacts
        path: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/bin/${{ needs.Determine_Build_Config.outputs.build-config }}/net${{ env.ARTIFACT_FOLDER_NAME }}
        error: There was an issue uploading the build artifact

    - name: Setup Nuget
      uses: NuGet/setup-nuget@v1.0.5

    - name: Create Nuget Package
      run: dotnet pack "${{ needs.Build_Project_File_Path.outputs.project-file-path }}" `
        -o "${{ github.workspace }}" `
        -c ${{ needs.Determine_Build_Config.outputs.build-config }}

    - name: Get Version From Project File
      id: proj-file-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish Nuget Package
      run: dotnet nuget push "${{ github.workspace }}/KinsonDigital.${{ env.PROJECT_NAME }}.${{ steps.proj-file-version.outputs.version }}.nupkg" `
        --api-key ${{ secrets.NUGET_ORG_API_KEY }} `
        --source https://api.nuget.org/v3/index.json

  Build_And_Release_Testing_App:
    name: Build & Release (Testing App)
    runs-on: windows-latest
    needs: [ Validate_Version, Determine_Build_Config ]
    steps:
    - uses: actions/checkout@v2

    - name: Get Version From Project File
      id: proj-file-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine Release Type
      id: determine_release_type
      run: |
        echo "Branch: ${{ github.ref }}"
        echo "::set-output name=is-prerelease::false";

        # If the branch is master, then set the release type to production
        if ("${{ github.ref }}".EndsWith("master"))
        {
          echo "::set-output name=release-type::Production";
        }
        elseif ("${{ github.ref }}".Contains("release/v"))
        { # If the branch is a release/v* branch, set the release to preview
          echo "::set-output name=is-prerelease::true";
          echo "::set-output name=release-type::Preview";
        }
        elseif ("${{ github.ref }}".EndsWith("develop"))
        { # If the branch is the develop branch, set the release to qa
          echo "::set-output name=release-type::QA";
        }

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NET_SDK_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Testing/${{ env.PROJECT_NAME }}Testing.csproj"

    - name: Perform App Publish
      run: |
        dotnet publish "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Testing/${{ env.PROJECT_NAME }}Testing.csproj" `
          -c ${{ needs.Determine_Build_Config.outputs.build-config }} `
          -o "${{ github.workspace }}/Testing/${{ steps.determine_release_type.outputs.release-type }}Release/" `
          --no-restore `

    - name: Package Testing App
      run: |
        Compress-Archive -Path "${{ github.workspace }}/Testing/${{ steps.determine_release_type.outputs.release-type }}Release" `
          -DestinationPath "${{ github.workspace }}/${{ env.PROJECT_NAME }}-TestingApp-v${{ steps.proj-file-version.outputs.version }}.zip" `
          -Force

    - name: Release Testing Application
      uses: softprops/action-gh-release@v0.1.12
      with:
        tag_name: v${{ steps.proj-file-version.outputs.version }}
        body: |
          ${{ env.PROJECT_NAME }} - ${{ steps.determine_release_type.outputs.release-type }} Release [v${{ steps.proj-file-version.outputs.version }}](https://github.com/KinsonDigital/${{ env.PROJECT_NAME }}/tree/v${{ steps.proj-file-version.outputs.version }})
          Execute the testing application in the **_${{ env.PROJECT_NAME }}-TestingApp-v${{ steps.proj-file-version.outputs.version }}.zip_** file to perform manual testing.
        files: ${{ env.PROJECT_NAME }}-TestingApp-v${{ steps.proj-file-version.outputs.version }}.zip
        prerelease: ${{ steps.determine_release_type.outputs.is-prerelease }}
